<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单编辑器]]></title>
    <url>%2F2018%2F10%2F14%2F%E7%AE%80%E5%8D%95%E7%BC%96%E8%BE%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[简单编辑器Description：要开发一个字符界面的编辑器，对文本的编辑操作是通过输入一个一个的“行编辑命令”完成的。 系统约定： 行编辑命令由命令关键字 命令参数组成。其中，命令关键字都是单一的字母，命令与参数之间使用一个空格进行分割，当命令参数为多个时采用 / 作为参数的分隔符，如果在命令的参数中间出现符号 / ，则用 \/ 表示。我们将 / 定义为转义符。 行插入： 1i #/串 在指定行号（&gt; 0）插入一个新行，新行的内容就是命令中给出的串。若插入的行超过了已有的行数，则在最后一行的后面插入一个新行。 文本替换： 1c 被替换串/替换串 将整个文本中全部被替换串替换为替换串 行删除： 1d # 其中#为指定的行号（不含#） 行合并： 1f 1/2/3... 将行号为 #2 和 #3… 的行连接到行号为 #1 的行的后面，取消原来的 #2 行和 #3 等，合并后 #2 行和 #3 等原来的内容不存在了，被后面的行抵补替代。若指定行号超出正文的范围，则放弃操作（不含#）。 查找串： 1q #x/串 查询行号为#x是否出现串，如果出现请输出Yes，否则输出No，保证行号合法，且查询操作在最后出现(含有#) 。 Input &amp; Output 输入首先是用[Text]……[/Text]的形式描述的编辑器初始内容，接下来会有若干插入、修改、删除查询操作。请根据描述处理所有操作，并输出最终编辑器内容。然后对于每个查询操作，请按时间轴顺序输出查询结果，注意格式和换行。 输入： 123456789[Text]ab cdefghij klmn20abcedfabiloveyoua a bb ccd e[/Text]c ab/12345f 1/2q #1/def 输出： 123412345 cdefghij klmn2012345cedf12345iloveyoua a bb ccd eYes 代码如下： 123456789101112131415161718192021222324252627282930#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;stdlib.h&gt;#include&lt;algorithm&gt; using namespace std;typedef struct NODE&#123; string line; struct NODE *next; &#125; node;node *head;node *p,*q,*HEAD,*x; int replace_all(string&amp; str,const string&amp; old_value, const string&amp; new_value) &#123; for(string::size_type pos(0);pos!=string::npos; pos+=new_value.length()) &#123; if((pos=str.find(old_value,pos))!=string::npos ) str.replace(pos,old_value.length(),new_value); else break; &#125; return 0; &#125;int main()&#123; string a,str; ​ char op;int n=0,num,uu=0,fin[10000],JIAA;;getline(cin,a);//cout&lt;&lt;a&lt;&lt;endl;p=new NODE;//p=(node)malloc(sizeof(node));p-&gt;next=NULL;HEAD=p;head=p;while(1){ getline(cin,a); //cout&lt;&lt;a&lt;&lt;endl; if(a==”[/Text]”) break; //p=(node)malloc(sizeof(node)); p=new NODE; p-&gt;line=a; head-&gt;next=p; p-&gt;next=NULL; head=p; n++;}//while(1){while(~scanf(“%c”,&amp;op)) { if(op==’i’) //行插入 { n++; getchar(); cin&gt;&gt;num;//cout&lt;&lt;num&lt;&lt;endl; getchar(); getline(cin,str);//cout&lt;&lt;str&lt;&lt;endl; for (int i = 1; i &lt; str.length(); i++) //去掉’ / ‘字符 { if (str[i]==’/‘&amp;&amp;str[i-1]==’\‘) str.erase(i-1,1); } p=new NODE; p-&gt;line=str; if(num&gt;=n) {//cout&lt;&lt;1&lt;&lt;endl; head-&gt;next=p; p-&gt;next=NULL; } else {//cout&lt;&lt;2&lt;&lt;endl; q=HEAD; for(int i=1;i&lt;=num;i++) { if(i!=num) { q=q-&gt;next; } else{ p-&gt;next=q-&gt;next; q-&gt;next=p; } } } } if(op==’d’) { getchar(); cin&gt;&gt;num; if(num&lt;=n) { q=HEAD; if(num==n) { for(int i=1;i&lt;=num;i++) { if(i!=num) q=q-&gt;next; else q-&gt;next=NULL; } } else for(int i=1;i&lt;=num;i++) { if(i!=num) q=q-&gt;next; else q-&gt;next=(q-&gt;next)-&gt;next; } } n--; } if(op==’f’) { int jia[20000],jiaa=0,k=0,jj=0; char ch; getchar();//空格 cin&gt;&gt;num; getchar(); while(1) { cin&gt;&gt;jia[jiaa]; ch=getchar(); if(jia[jiaa]&gt;n) { if(ch==&apos;\n&apos;) break; if(ch==&apos;/&apos;) continue; } jiaa++; if(ch==&apos;\n&apos;) { break; } //if(ch==&apos;/&apos;) continue; } JIAA=jiaa; if(num&lt;=n){ q=HEAD; for(int i=1;i&lt;=num;i++) { q=q-&gt;next;//第 i 个 } while(jiaa--) { x=HEAD; for(int i=1;i&lt;=jia[k];i++) //选定被合并的 x=x-&gt;next; a=x-&gt;line; //合并 q-&gt;line+=a; k++; } k=0; sort(jia,jia+JIAA); while(JIAA--) { x=HEAD; for(int i=1;i&lt;=jia[k]-jj;i++) //删除 合并完的 { if(i!=jia[k]-jj) x=x-&gt;next; else x-&gt;next=(x-&gt;next)-&gt;next; } n--; jj++;//每次删除行后 行的号码都会 -1 ； k++; } } } if(op==’c’) { int ss=0; char betihuan[10000],tihuan[10000]; string one,two; getchar(); while(1) { scanf(“%c”,&amp;betihuan[ss]); if(betihuan[ss]==’/‘&amp;&amp;ss&gt;0&amp;&amp;betihuan[ss-1]!=’\‘) { ss=ss-1; break; } if(betihuan[ss]==’/‘&amp;&amp;ss&gt;0&amp;&amp;betihuan[ss-1]==’\‘) { ss-=1; betihuan[ss]=’/‘; } ss++; } for(int i=0;i&lt;=ss;i++) // 转换格式 one += betihuan[i]; //cout&lt;&lt;one&lt;&lt;endl; ss=0; while(1) { scanf(“%c”,&amp;tihuan[ss]); if(tihuan[ss]==’\n’) { ss=ss-1; break; } if(tihuan[ss]==’/‘&amp;&amp;ss&gt;0&amp;&amp;tihuan[ss-1]==’\‘) { ss-=1; tihuan[ss]=’/‘; } ss++; } for(int i=0;i&lt;=ss;i++) // 转换格式 two += tihuan[i]; //cout&lt;&lt;two&lt;&lt;endl; q=HEAD; for(int i=1;i&lt;=n;i++) { q=q-&gt;next; replace_all(q-&gt;line,one,two); } }if(op==’q’) //查询 { getchar(); getchar(); cin&gt;&gt;num; getchar(); getline(cin,str); for (int i = 1; i &lt; str.length(); i++) //去掉’ / ‘字符 { if (str[i]==’/‘&amp;&amp;str[i-1]==’\‘) str.erase(i-1,1); } q=HEAD; for(int i=1;i&lt;=num;i++) { q=q-&gt;next;//第 i 个 } a=q-&gt;line; string::size_type idx = a.find(str); //判断字符串是否包含子字符串 if (idx == string::npos) fin[uu]=0;// cout&lt;&lt;”NO”&lt;&lt;”\n”; else fin[uu]=1; //cout&lt;&lt;”YES”&lt;&lt;”\n”; uu++; }​123456789101112131415&#125; q=HEAD-&gt;next; //cout&lt;&lt; q-&gt;line&lt;&lt;endl; for(int i=1;i&lt;=n;i++) &#123; cout&lt;&lt;q-&gt;line&lt;&lt;endl; q=q-&gt;next; &#125; for(int i=0;i&lt;uu;i++) &#123; if(fin[i]==1) cout&lt;&lt;&quot;Yes&quot;&lt;&lt;&quot;\n&quot;; else cout&lt;&lt;&quot;No&quot;&lt;&lt;&quot;\n&quot;; &#125; &#125;]]></content>
      <tags>
        <tag>小学期第几波题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[string 结构体赋值]]></title>
    <url>%2F2018%2F09%2F30%2Fstring-%E7%BB%93%E6%9E%84%E4%BD%93%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[结构体中string赋值在进行一下操作时，下面一行调试出现错误，程序终止。 1234567891011121314151617181920212223242526typedef struct NODE&#123; string line; struct NODE *next; &#125; node;node *head;node *p,*q,*HEAD;main()&#123; char op; int n=0,num; p=(node*)malloc(sizeof(node)); p-&gt;next=NULL; HEAD=p; head=p; while(1) &#123; getline(cin,a); p = (node*)malloc(sizeof(node));//***** p-&gt;line=a; //出现错误！！！ ***************** head-&gt;next=p; p-&gt;next=NULL; head=p; n++; &#125;&#125; 由于：结构体内的string不定长，不能动态分配内存，需要用用new来分配内存 malloc只是分配内存。new除了分配内存还会调用构造函数的。 应将 1p = (node*)malloc(sizeof(node)); 改为 1p = new NODE;]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 环境配置]]></title>
    <url>%2F2018%2F09%2F24%2Fjava-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.新建一个文本文档，重命名为：HelloWorld.java（注意把.txt的后缀名改为.java）(此处我用sublime) 2.写入：类的名字HelloWorld必须和文档名相同 12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println(&quot;HelloWorld&quot;);//尽量不要有中文 &#125;&#125; 3.运行： PS F:> javac HelloWorld.javaPS F:> java HelloWorld.java错误: 找不到或无法加载主类 HelloWorld.java原因: java.lang.ClassNotFoundException: HelloWorld.javaPS F:> java HelloWorldHello World! 4.前提 配置环境变量： 在新建页面，输入变量名“JAVA_HOME”；变量值“你的jdk的路径（请参照下图，找到你的安装路径）”，然后点击“确定”； 选择“新建”，输入变量名“CLASSPATH”；（此步可省略） 变量值：“.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;”。请注意 变量 值中，前面的“点“和”分号”； 找到Path，对其进行编辑：添加变量值的 变量值为 ;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin; 打开cmd, 在命令行输入java –version；如果能显示java的版本信息，则表示配置成功。(也有可能还没成功) 5.编译原理简介第一步（编译）：创建完源文件之后，程序先要被JVM中的java编译器进行编译为.class文件，Javac 的任务就是将Java源代码编译成Java字节码。从表面看是将.java文件转化为.class文件。而实际上是将Java源代码转化成一连串二进制数字，这些二进制数字只有JVM能够准确的识别他们到底是什么。java编译一个类时，如果这个类所依赖的类还没有被编译，编译器会自动的先编译这个所依赖的类，然后引用。 第二步（运行）：java类运行的过程大概分为两个步骤：（1）类的加载 （2）类的执行。需要注意的是：JVM主要在程序第一次运行时主动使用类的 时候，才会立即去加载。JVM并不是在运行时就会把所有使用到的类都加载到内存中，而是用到，不得不加载的时候，才加载进来，而且只加载一次！]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github 发布文章错误收集]]></title>
    <url>%2F2018%2F09%2F12%2Fgithub-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Unable to create ndex.lock之前因为这个错误什么都改不了，终于找到这个bug: FATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: fatal: Unable to create ‘D:/hexo/blog/.deploy_git/.git/index.lock’: File exists. 可能是之前在git没有运行完成的时候强制关闭，下次提交的时候产生的错误 找.deploy_git 文件夹，进去可能没有.git ，打开隐藏文件，找 index文件 删除就好了。 YAMLException YAMLException ：can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1: 查看新建要上传地md文件，tags或者其他，与后面内容是不是有一个空格 也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页]]></content>
  </entry>
  <entry>
    <title><![CDATA[two-term]]></title>
    <url>%2F2018%2F09%2F12%2Ftwo-term%2F</url>
    <content type="text"><![CDATA[打包礼物Description：有k个礼物，如果两个礼物的体积满足小礼物的体积的两倍不超过大礼物的体积，那么小礼物可塞在大礼物里。同时**一个大礼物里最多只能塞一个其他小礼物，小礼物里可包含其他更小的礼物。如果小礼物被塞进大礼物里了，那么就不用再付小礼物的快递费了。如何使得最后剩下的礼物数量最少？ Input: 输入第一行有一个正整数 n，表示礼物的数量； 接下来一行共 n 个正整数，依次表示这些礼物的体积 V ; Output 第一行输出一个正整数 p，表示安排后剩下的最少礼物数量。 接下来 p 行，每行开头输入一个正整数 t，表示这个礼物里被塞进去的礼物总数量。接下来输入 t 个数，从前到后依次表示这些礼物的编号，按照体积从小到大排序。 输入 1252 3 5 1 4 输出 123432 1 3 2 4 51 2 解析：构造一个结构体，里边存的是编号，体积，和变量down(存下一个值)（初始化为-1） 按体积由小到大进行排序，用两个变量i j从尾部向前遍历，先固定 i , 然后 j–, 如果 i 对应的礼物能包下 j 对应的礼物，让 i 的down 指向 j ，并给j 的down 赋-2 （以为包含）跳出内层循环，下次接着上次的 j -1 (思考）。重复这个过程直到结束 然后输出。]]></content>
      <tags>
        <tag>小学期第几波题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[one term]]></title>
    <url>%2F2018%2F08%2F31%2Fone-term%2F</url>
    <content type="text"><![CDATA[小学期第一波题A+B (I)Description：二进制加法T 组数据[1,10]；接下来 T 行，每行输入两个二进制串 a 和 b 中间用空格隔开，保证它们长度 a,b&lt;=1000 并且没有前导 0。 如 输入： 1↵ 11101 110↵ 输出 1234 11101+ 110-------- 100011 解析：由于是大数，不能先转化成十进制数，然后相加，再转化成二进制，应该直接进行数组加，字符输入，求长度，然后从最后开始加，用pp变量标记是否有进位，分情况讨论 0 1 pp ；如果一个算完了，就比较 另一个与pp的情况，输出看着复杂，精心写也就那样。记得情况讨论完全。 进车Description：进车座位12排，每排可以坐4人，中间有过道。但最后一排中间没有过道，所以可以坐5人，会坐在尽可能靠前的空位。如果同一排有多个位置，他们会统一坐在最左边的空位。车里已经有 k 个乘客了，如果能，他应该坐在哪？ 输入：9 输出： 12345678yes+--------------------------+|#.#.#.#.#.#.#.#.#.O.O.O.|D|)|#.#.#.#.#.#.#.#.#.X.O.O.|.||#.........................||#.#.#.#.#.#.#.#.#.#.O.O.|.||#.#.#.#.#.#.#.#.#.#.O.O.|.|)+--------------------------+ 解析：有个46位置麻烦，先解决，其他看成二维数组，先不要管后面的特殊字符D ，），进行模拟，本来是从右向左，从上向下；改变k的值，变成从左向右，从下向上，不变好像也行，用 n 记录数到第几个了]]></content>
      <tags>
        <tag>小学期第一波题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[atom use]]></title>
    <url>%2F2018%2F08%2F19%2Fatom-use%2F</url>
    <content type="text"><![CDATA[there will be same usage of atom. 预览快捷键 Shift + Ctrl + M]]></content>
  </entry>
  <entry>
    <title><![CDATA[first]]></title>
    <url>%2F2018%2F08%2F18%2Ffirst%2F</url>
    <content type="text"><![CDATA[今天终于弄好了简单的GitHub的博客，但是好难看啊]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.hahah Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
